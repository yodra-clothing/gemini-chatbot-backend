const express = require('express');
const axios = require('axios');
const cors = require('cors');

const app = express();
const port = process.env.PORT || 3000;

// Use CORS to allow requests from your front-end
app.use(cors());
app.use(express.json());

// Main endpoint to handle chat requests
app.post('/api/chat', async (req, res) => {
  const { prompt } = req.body;
  const apiKey = process.env.GEMINI_API_KEY; // Your API key is securely stored here

  if (!apiKey) {
    return res.status(500).json({ message: "API key is not configured on the server." });
  }

  if (!prompt) {
    return res.status(400).json({ message: "Prompt is required." });
  }

  try {
    // Step 1: Generate text from the Gemini API
    const textGenPayload = {
      contents: [{ parts: [{ text: prompt }] }],
      model: "gemini-2.5-flash-preview-05-20"
    };
    const textGenApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

    const textGenResponse = await axios.post(textGenApiUrl, textGenPayload, {
      headers: { 'Content-Type': 'application/json' }
    });

    const assistantText = textGenResponse.data.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!assistantText) {
      return res.status(500).json({ message: "No text was generated by the AI." });
    }

    // Step 2: Generate audio from the generated text
    const audioGenPayload = {
      contents: [{ parts: [{ text: assistantText }] }],
      generationConfig: {
        responseModalities: ["AUDIO"],
        speechConfig: {
          voiceConfig: {
            prebuiltVoiceConfig: { voiceName: "Sadachbia" }
          }
        }
      },
      model: "gemini-2.5-flash-preview-tts"
    };

    const audioGenApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${apiKey}`;

    const audioGenResponse = await axios.post(audioGenApiUrl, audioGenPayload, {
      headers: { 'Content-Type': 'application/json' }
    });
    
    const audioData = audioGenResponse.data.candidates?.[0]?.content?.parts?.[0]?.inlineData?.data;
    const mimeType = audioGenResponse.data.candidates?.[0]?.content?.parts?.[0]?.inlineData?.mimeType;

    // Send the text and audio data back to the front-end
    res.json({
      text: assistantText,
      audioData: audioData,
      mimeType: mimeType
    });

  } catch (error) {
    console.error("Backend API call failed:", error.response ? error.response.data : error.message);
    res.status(500).json({ message: "An error occurred while communicating with the AI services." });
  }
});

app.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});
